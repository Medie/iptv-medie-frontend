import { useMemo, useState } from "react";
import useSWR from "swr";
import Layout from "../components/Layout";
import PlaylistCard from "../components/PlaylistCard";
import { fetchPlaylistTags, API_BASE_URL } from "../lib/api";
import { useProtectedRoute } from "../hooks/useProtectedRoute";

const fetcher = () => fetchPlaylistTags();

export default function DashboardPage() {
  const { loading: authLoading, user } = useProtectedRoute();
  const { data, isLoading, error, mutate } = useSWR("playlist-tags", fetcher, {
    revalidateOnFocus: false
  });
  const [query, setQuery] = useState("");
  const [regionFilter, setRegionFilter] = useState("all");
  const [languageFilter, setLanguageFilter] = useState("all");

  const filterOptions = useMemo(() => {
    const regions = new Set();
    const languages = new Set();
    (data || []).forEach((tag) => {
      (tag.meta?.readable?.regions || []).forEach((region) => regions.add(region));
      (tag.meta?.readable?.languages || []).forEach((language) => languages.add(language));
    });
    return {
      regions: Array.from(regions),
      languages: Array.from(languages)
    };
  }, [data]);

  const filtered = (data || []).filter((tag) => {
    const readable = tag.meta?.readable || {};
    const matchesQuery = (() => {
      if (!query.trim()) return true;
      const q = query.toLowerCase();
      return (
        tag.playlist_path.toLowerCase().includes(q) ||
        (readable.countries || []).some((c) => c.toLowerCase().includes(q)) ||
        (readable.languages || []).some((l) => l.toLowerCase().includes(q)) ||
        (readable.regions || []).some((r) => r.toLowerCase().includes(q))
      );
    })();
    const matchesRegion =
      regionFilter === "all" ||
      (readable.regions || []).some((region) => region.toLowerCase() === regionFilter.toLowerCase());
    const matchesLanguage =
      languageFilter === "all" ||
      (readable.languages || []).some(
        (language) => language.toLowerCase() === languageFilter.toLowerCase()
      );

    return matchesQuery && matchesRegion && matchesLanguage;
  });

  if (authLoading) {
    return (
      <Layout title="Dashboard">
        <p className="text-slate-500 dark:text-slate-400">Loading session…</p>
      </Layout>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <Layout title="Dashboard">
      <section className="mb-8 flex flex-col gap-4 rounded-xl border border-slate-200 bg-white/80 p-6 dark:border-slate-800 dark:bg-slate-900/40 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-xl font-semibold text-slate-900 dark:text-slate-100">AI-tagged playlists</h2>
          <p className="text-sm text-slate-600 dark:text-slate-400">
            Explore language, country, and region metadata generated by the AI tagger.
          </p>
        </div>
        <div className="flex flex-col gap-3 sm:flex-row sm:flex-wrap sm:items-center sm:justify-end">
          <div className="flex gap-3">
            <input
              value={query}
              onChange={(event) => setQuery(event.target.value)}
              placeholder="Filter by country, language, path..."
              className="w-full rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 focus:border-primary focus:outline-none dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100 md:w-72"
            />
            <button
              type="button"
              onClick={() => mutate()}
              className="rounded-md border border-slate-300 px-3 py-2 text-sm text-slate-700 transition hover:border-primary hover:text-primary dark:border-slate-700 dark:text-slate-200"
            >
              Refresh
            </button>
          </div>
          <div className="flex gap-3">
            <select
              value={regionFilter}
              onChange={(event) => setRegionFilter(event.target.value)}
              className="rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 focus:border-primary focus:outline-none dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100"
            >
              <option value="all">All regions</option>
              {filterOptions.regions.map((region) => (
                <option key={region} value={region}>
                  {region}
                </option>
              ))}
            </select>
            <select
              value={languageFilter}
              onChange={(event) => setLanguageFilter(event.target.value)}
              className="rounded-md border border-slate-300 bg-white px-3 py-2 text-sm text-slate-900 focus:border-primary focus:outline-none dark:border-slate-700 dark:bg-slate-950 dark:text-slate-100"
            >
              <option value="all">All languages</option>
              {filterOptions.languages.map((language) => (
                <option key={language} value={language}>
                  {language}
                </option>
              ))}
            </select>
          </div>
        </div>
      </section>

      {isLoading && <p className="text-slate-500 dark:text-slate-400">Loading playlists…</p>}
      {error && (
        <p className="text-red-500 dark:text-red-400">
          Failed to load data from API. Check <code>NEXT_PUBLIC_API_URL</code> or run the backend.
        </p>
      )}

      {!isLoading && !error && (
        <div className="grid gap-5 sm:grid-cols-2 lg:grid-cols-3">
          {filtered.map((tag) => {
            const readable = tag.meta?.readable || {};
            return (
              <PlaylistCard
                key={tag.playlist_path}
                title={tag.playlist_path.split("/").slice(-2).join(" / ")}
                group={readable.countries?.join(", ") || "Global"}
                language={readable.languages?.[0] || "Multi"}
                region={readable.regions?.join(", ") || "Unknown"}
                href={`${API_BASE_URL}${tag.playlist_path}`}
              />
            );
          })}
          {filtered.length === 0 && (
            <p className="col-span-full text-center text-slate-500 dark:text-slate-400">
              No playlists matched your filters.
            </p>
          )}
        </div>
      )}
    </Layout>
  );
}
