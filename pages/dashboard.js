import { useState } from "react";
import useSWR from "swr";
import Layout from "../components/Layout";
import PlaylistCard from "../components/PlaylistCard";
import { fetchPlaylistTags, API_BASE_URL } from "../lib/api";

const fetcher = () => fetchPlaylistTags();

export default function DashboardPage() {
  const { data, isLoading, error, mutate } = useSWR("playlist-tags", fetcher, {
    revalidateOnFocus: false
  });
  const [query, setQuery] = useState("");

  const filtered = (data || []).filter((tag) => {
    if (!query.trim()) return true;
    const q = query.toLowerCase();
    const readable = tag.meta?.readable || {};
    return (
      tag.playlist_path.toLowerCase().includes(q) ||
      (readable.countries || []).some((c) => c.toLowerCase().includes(q)) ||
      (readable.languages || []).some((l) => l.toLowerCase().includes(q)) ||
      (readable.regions || []).some((r) => r.toLowerCase().includes(q))
    );
  });

  return (
    <Layout title="Dashboard">
      <section className="mb-8 flex flex-col gap-4 rounded-xl border border-slate-800 bg-slate-900/40 p-6 sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h2 className="text-xl font-semibold text-slate-100">AI-tagged playlists</h2>
          <p className="text-sm text-slate-400">
            Explore language, country, and region metadata generated by the AI tagger.
          </p>
        </div>
        <div className="flex gap-3">
          <input
            value={query}
            onChange={(event) => setQuery(event.target.value)}
            placeholder="Filter by country, language, path..."
            className="w-full rounded-md border border-slate-700 bg-slate-900 px-3 py-2 text-sm text-slate-100 focus:border-primary focus:outline-none md:w-72"
          />
          <button
            type="button"
            onClick={() => mutate()}
            className="rounded-md border border-slate-700 px-3 py-2 text-sm text-slate-200 transition hover:border-primary"
          >
            Refresh
          </button>
        </div>
      </section>

      {isLoading && <p className="text-slate-400">Loading playlistsâ€¦</p>}
      {error && (
        <p className="text-red-400">
          Failed to load data from API. Check <code>NEXT_PUBLIC_API_URL</code> or run the backend.
        </p>
      )}

      {!isLoading && !error && (
        <div className="grid gap-5 sm:grid-cols-2 lg:grid-cols-3">
          {filtered.map((tag) => {
            const readable = tag.meta?.readable || {};
            return (
              <PlaylistCard
                key={tag.playlist_path}
                title={tag.playlist_path.split("/").slice(-2).join(" / ")}
                group={readable.countries?.join(", ") || "Global"}
                language={readable.languages?.[0] || "Multi"}
                region={readable.regions?.join(", ") || "Unknown"}
                href={`${API_BASE_URL}${tag.playlist_path}`}
              />
            );
          })}
          {filtered.length === 0 && (
            <p className="col-span-full text-center text-slate-400">
              No playlists matched your filters.
            </p>
          )}
        </div>
      )}
    </Layout>
  );
}
